package com.problem.solving.algorithms.graphs.adjacencymatrix;

import java.util.Arrays;

/*
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

https://leetcode.com/problems/minimize-malware-spread/
 */
public class MinimizeMalwareSpread {


    /*
This algorithm has a few parts:
Coloring each component: For each node, if it isn't yet colored, use a depth-first search to
traverse its component, coloring that component with a new color.
Size of each color: Count the number of occurrences of each color.
Find unique colors: Look at the colors of nodes in initial to see which nodes have unique colors.
Choose answer: For each node with a unique color, find the size of that color. The largest size is selected, with ties broken by lowest node number.
If there is no node with a unique color, the answer is min(initial).
  */


    public static void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int i = 0; i < graph.length; i++) {
            if (graph[node][i] == 1 && colors[i] == -1)
                dfs(graph, colors, i, color);
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        // 1. Color each component.
        // colors[node] = the color of this node.

        int N = graph.length;
        int[] colors = new int[N];
        Arrays.fill(colors, -1);
        int C = 0;

        for (int node = 0; node < N; ++node)
            if (colors[node] == -1)
                dfs(graph, colors, node, C++);

        // 2. Size of each color.
        int[] size = new int[C];
        for (int color : colors)
            size[color]++;

        // 3. Find unique colors.
        int[] colorCount = new int[C];
        for (int node : initial)
            colorCount[colors[node]]++;

        // 4. Answer
        int ans = Integer.MAX_VALUE;
        for (int node : initial) {
            int c = colors[node];
            if (colorCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c] > size[colors[ans]])
                    ans = node;
                else if (size[c] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int node : initial)
                ans = Math.min(ans, node);

        return ans;
    }


}
